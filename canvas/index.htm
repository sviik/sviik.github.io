
<!DOCTYPE html>
<html lang="en">
<head>
  <script src="https://api.beta.glia.com/salemove_integration.js"></script>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Canvas Image Display</title>
  <style>
    body {
      font-family: sans-serif;
      text-align: center;
      margin: 2rem;
    }
    canvas {
      border: 1px solid #ccc;
    }
  </style>
  <script>
   sm.getApi({version: "v1"}).then(function(glia) {
  var imgReplacementMarker = "glia-canvas-mirror-image";

  function makeCanvasVisibleToScreen(canvas) {
    // Avoid creating the image when it is already present
    // Warning: client-specific DOM-traversal
    if (canvas.nextElementSibling && canvas.nextElementSibling.tagName === "IMG") {
      return;
    }

    // Add invisible replication of canvas contents to source side DOM
    var imgReplacement = document.createElement("IMG");
    imgReplacement.className = imgReplacementMarker;
    imgReplacement.src = canvas.toDataURL("image/png"); // Dump canvas contents to image
    imgReplacement.style = "display: none"; // Make the image invisible to the source
    canvas.parentElement.appendChild(imgReplacement); // Add image to the DOM

    var imgStyleForAgent = "display: block";

    // Make the invisible image visible to screen
    glia.changeElementAttributesForCobrowsing(imgReplacement, function(attributes) {
      attributes.style = imgStyleForAgent;
      return attributes;
    });
  }

  function mirrorAllCanvases() {
    // Add the image for all existing canvases
    var canvases = document.querySelectorAll("canvas");
    canvases.forEach(makeCanvasVisibleToScreen);

    // Monitor new canvases and create images
    var canvasParent = document.querySelector("#canvasParent");

    mutationObserver = new MutationObserver(function() {
      var newCanvases = document.querySelectorAll("my-selector");
      newCanvases.forEach(makeCanvasVisibleToScreen);
    });
    mutationObserver.observe(canvasParent, {childList: true});
    return mutationObserver;
  }

  var previousVisitorStatus;
  var mutationObserver;
  glia.addEventListener(glia.EVENTS.VISITOR_STATUS_UPDATE, function(visitorStatus) {

    // Create image mirrors only when "engaged"
    if (visitorStatus.engaged && (!previousVisitorStatus || !previousVisitorStatus.engaged)) {
      // Remove all existing image replacement to "refresh" all the canvas images
      // whenever CoBrowsing restarts.
      var existingImageReplacements = document.querySelectorAll("img." + imgReplacementMarker);
      existingImageReplacements.forEach(function(element) {
        element.parentElement.removeChild(element);
      });

      mirrorAllCanvases();
    }

    previousVisitorStatus = visitorStatus;
  });
});
  </script>
</head>
<body>
  <h1>Canvas Image Viewer</h1>
  <div id="canvasParent">
    <canvas id="imageCanvas" width="600" height="400"></canvas>
  </div>

  <script>
    const canvas = document.getElementById('imageCanvas');
    const ctx = canvas.getContext('2d');

    const img = new Image();
    img.src = '53249156792_ac64396a76_o.jpg';
    img.onload = function () {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      const ratio = Math.min(
        canvas.width / img.width,
        canvas.height / img.height
      );
      const newWidth = img.width * ratio;
      const newHeight = img.height * ratio;
      const x = (canvas.width - newWidth) / 2;
      const y = (canvas.height - newHeight) / 2;

      ctx.drawImage(img, x, y, newWidth, newHeight);
    };
  </script>
</body>
</html>
